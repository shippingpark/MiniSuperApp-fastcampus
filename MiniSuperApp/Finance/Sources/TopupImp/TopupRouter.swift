//
//  TopupRouter.swift
//  MiniSuperApp
//
//  Created by Î∞ïÌòúÏö¥ on 2023/07/29.
//

import ModernRIBs
import AddPaymentMethod
import SuperUI
import RIBsUtil
import FinanceEntity
import Topup

protocol TopupInteractable: Interactable, AddPaymentMethodListener, EnterAmountListener, CardOnFileListener {
  var router: TopupRouting? { get set }
  var listener: TopupListener? { get set }
  var presentationDelegateProxy: AdaptivePresentationControllerDelegateProxy { get }
}

protocol TopupViewControllable: ViewControllable {
}

final class TopupRouter: Router<TopupInteractable>, TopupRouting {
  
  private var navigationControllable: NavigationControllerable?
  
  private let addPaymentMethodBuildable: AddPaymentMethodBuildable
  private var addPaymentMethodRouting: Routing?
  
  private let enterAmountBuildable: EnterAmountBuildable
  private var enterAmountRouting: Routing?
  
  private let cardOnFileBuildable: CardOnFileBuildable
  private var cardOnFileRouting: Routing?

    // TODO: Constructor inject child builder protocols to allow building children.
  init(interactor: TopupInteractable,
       viewController: ViewControllable,
       addPaymentMethodBuildable: AddPaymentMethodBuildable,
       enterAmountBuildable: EnterAmountBuildable,
       cardOnFileBuildable: CardOnFileBuildable
  ) {
    self.viewController = viewController
    self.addPaymentMethodBuildable = addPaymentMethodBuildable
    self.enterAmountBuildable = enterAmountBuildable
    self.cardOnFileBuildable = cardOnFileBuildable
    super.init(interactor: interactor)
    interactor.router = self
  }

    func cleanupViews() { //topupInteractorÏùò willResignActiveÏóêÏÑú Î∂àÎ¶∞Îã§ 
      //Î∂ÄÎ™®Í∞Ä ÎÇòÎ•º detachÌï† Îïå interactorÏóê ÏùòÌï¥ Ïã§ÌñâÎê† Í≤ÉÏûÑ
      //Ïù¥ Í∏∞ÌöåÏóê topupRouterÍ∞Ä ÎùÑÏõåÏ§¨Îçò Î™®Îì† ÌôîÎ©¥ÏùÑ ÎÇ¥Î†§Ïïº Ìï®
      // Î∑∞Í∞Ä Ï°¥Ïû¨ÌïòÍ≥†, ÎÑ§ÎπÑÍ≤åÏù¥ÏÖòÎèÑ Ï°¥Ïû¨ÌïúÎã§Î©¥
      if viewController.uiviewController.presentedViewController != nil, navigationControllable != nil {
        navigationControllable?.dismiss(completion: nil)//topupRouterÏùò Ï±ÖÏûÑÏúºÎ°ú, ÎÑ§ÎπÑÍ≤åÏù¥ÏÖòÎèÑ ÏóÜÏï∞
      }
    }
  
  func attachAddPaymentMehtod(closeButtonType: DismissButtonType) {
    if addPaymentMethodRouting != nil {
      return
    }
    
    let router = addPaymentMethodBuildable.build(withListener: interactor, closeButtonType: closeButtonType)
    
    if let navigationControllable = navigationControllable {
      navigationControllable.pushViewController(router.viewControllable, animated: true)
    } else {
      presentInsideNavigation(router.viewControllable)
    }
    //(navigationcontrollerÏóê Ïã∏ÏÑú Î≥¥ÎÇ¥Ïïº Ìï®. Í∑∏ÎûòÏïº Îí§Î°ú Îã´Í∏∞ Î≤ÑÌäº Í∞ôÏùÄ Í≤ÉÏùÑ ÌôúÏö©Ìï† Ïàò ÏûàÍ∏∞ ÎïåÎ¨∏Ïóê
    attachChild(router)
    addPaymentMethodRouting = router
  }
  
  func detachAddPaymentMehtod() {
    guard let router = addPaymentMethodRouting else {
      return
    }
    
    //dismissPresentedNavigation(completion: nil)
    navigationControllable?.popViewController(animated: true)
    detachChild(router)
    addPaymentMethodRouting = nil 
  }
  
  func attachEnterAmount() { //ÎëêÍ∞ÄÏßÄ Ïñ¥ÌÉúÏπòÍ∞Ä Ï°¥Ïû¨. 1Ô∏è‚É£Ïπ¥ÎìúÍ∞Ä Ï°¥Ïû¨Ìï¥ÏÑú ÏµúÏ¥à presentÌï† Îïå Ìò∏Ï∂ú, 2Ô∏è‚É£Ïπ¥Îìú Ï∂îÍ∞Ä ÌõÑ Ìò∏Ï∂ú
    if enterAmountRouting != nil {
      return
    }
    
    let router = enterAmountBuildable.build(withListener: interactor)
    if let navigation = navigationControllable {
      navigation.setViewControllers([router.viewControllable]) //Ìïú Î≤à ÎÇ†Î†§Ï§ÄÎã§
      resetChildRouting() //Í∏∞Ï°¥Ïùò childÎ•º Îã§ ÏßÄÏö∞Í≥†
    } else {
      presentInsideNavigation(router.viewControllable)
    }
    
    attachChild(router) //Î∂ôÏù∏Îã§
    enterAmountRouting = router
  }
  
  func detachEnterAmount() {
    guard let router = enterAmountRouting else {
      return
    }
    
    dismissPresentedNavigation(completion: nil)
    detachChild(router)
    enterAmountRouting = nil
  }
  
  func attachCardOnFile(paymentMethods: [PaymentMethod]) {
    if cardOnFileRouting != nil {
      return
    }
    
    let router = cardOnFileBuildable.build(withListener: interactor, paymentMethods: paymentMethods) //üî•ÏÉùÏÑ±ÌïòÍ∏∞ ÏúÑÌï¥ ÎÑ£Ïñ¥Ï§òÏïº Ìï† Í∞íÏùÄ build Î©îÏÑúÎìú Ìò∏Ï∂ú ÏãúÏ†êÏóê ÌååÎùºÎØ∏ÌÑ∞Î°ú Ï†ÑÎã¨Ìï¥Ï£ºÎ©¥ ÎêúÎã§
    navigationControllable?.pushViewController(router.viewControllable, animated: true)
    cardOnFileRouting = router
    attachChild(router)
  }
  
  func detachCardOnFile() {
    guard let router = cardOnFileRouting else {
      return
    }
    
    navigationControllable?.popViewController(animated: true)
    detachChild(router)
    cardOnFileRouting = nil
  }
  
  func popToRoot() {
    navigationControllable?.popToRoot(animated: true)
    resetChildRouting()
  }
  
  //ÎÑ§ÎπÑÍ≤åÏù¥ÏÖòÏúºÎ°ú ÌôîÎ©¥ÏùÑ ÎùÑÏö∞Îäî Ìó¨Ìçº Î©îÏÜåÎìú
  private func presentInsideNavigation(_ viewControllable: ViewControllable) {
    let navigation = NavigationControllerable(root: viewControllable)  //Î∑∞Î•º ÎùÑÏö∏ ÎïåÎäî Î∂ÄÎ™®Í∞Ä Î≥¥ÎÇ¥Ï§Ä Î∑∞
    navigation.navigationController.presentationController?.delegate = interactor.presentationDelegateProxy
    self.navigationControllable = navigation// pushÏôÄ popÏùÑ Ìï† Îïå ÌïÑÏöîÌïòÎØÄÎ°ú ÎÑ§ÎπÑÍ≤åÏù¥ÏÖòÏùÑ ÌîÑÎ°úÌçºÌã∞Î°ú
    viewController.present(navigation, animated: true, completion: nil)
  }
  
  private func dismissPresentedNavigation(completion: (() -> Void)?) {
    if self.navigationControllable == nil {
      return
    }
    
    viewController.dismiss(completion: nil) //ÎÇ¥Í∞Ä ÏßÅÏ†ë dismiss
    self.navigationControllable = nil
  }
  
  private func resetChildRouting() {
    if let cardOnFileRouting = cardOnFileRouting {
      detachChild(cardOnFileRouting)
      self.cardOnFileRouting = nil
    }
    
    if let addPaymentMethodRouting = addPaymentMethodRouting {
      detachChild(addPaymentMethodRouting)
      self.addPaymentMethodRouting = nil
    }
  }
  

    // MARK: - Private

    private let viewController: ViewControllable
}
